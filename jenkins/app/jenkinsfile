pipeline {
    agent {label 'windows'}

    parameters {
        choice(choices: ['22.03', '20.03', '22.09'], name: 'release')
    }

    environment {
        release_version = '0'
    }

    stages {
        stage('prepare') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'lichaoran-gitee', url: 'https://gitee.com/mywaaagh_admin/wsl']]])
                bat 'pip install -r requirements.txt'

                script {
                    nstdout = bat(returnStdout: true, script: '@python get_sp_version.py %release%').trim()
                    release_version = nstdout
                    println("stdout ####" + release_version + "###########")
                }
                
                withEnv(["release_version=${release_version}"]) {
                    bat('python custom.py -r %release% -v %release_version%.%BUILD_NUMBER%')
                }

                withCredentials([string(credentialsId: 'wsl_api_token', variable: 'wsl_jenkins_api_token')]) {
                    dir ('x64') {
                        bat 'curl -o install.tar.gz -L https://lichaoran:%wsl_jenkins_api_token%@jenkins.osinfra.cn/job/openeuler-wsl/job/rootfs/arch=x86_64,label=docker-x86-openeuler-slaves/lastSuccessfulBuild/artifact/outdir/22.03-x86_64.tar.gz'
                    }

                    dir ('ARM64') {
                        bat 'curl -o install.tar.gz -L https://lichaoran:%wsl_jenkins_api_token%@jenkins.osinfra.cn/job/openeuler-wsl/job/rootfs/arch=aarch64,label=docker-x86-openeuler-slaves/lastSuccessfulBuild/artifact/outdir/22.03-aarch64.tar.gz'
                    }
                }

                withCredentials([string(credentialsId: 'wsl_cert_b64_lichaoran', variable: 'cert_b64')]) {
                    writeFile file: 'certificate.txt', text: cert_b64
                }

                bat 'powershell "certutil -decode certificate.txt certificate.pfx"'
                bat 'powershell "Import-PfxCertificate -CertStoreLocation Cert:LocalMachine\\Trust -FilePath certificate.pfx"'
                bat 'powershell "Import-PfxCertificate -CertStoreLocation Cert:CurrentUser\\My -FilePath certificate.pfx"'
                bat '.\\build.bat'
                bat 'powershell "cp -v meta/%release%/%release%.PNG AppPackages/DistroLauncher-Appx/"'

                dir ('AppPackages/DistroLauncher-Appx') {
                    bat 'powershell ls'
                    bat 'powershell Compress-Archive -Path ".\\DistroLauncher-Appx_*_x64_arm64_bundle.appxupload", "*.PNG" -DestinationPath app.zip"'
                }

                bat 'powershell Compress-Archive -Path .\\AppPackages\\DistroLauncher-Appx\\DistroLauncher-Appx_*\* -DestinationPath sideload-%release%.zip'
                archiveArtifacts artifacts: "sizeload-${release}.zip", followSymlinks: false
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
