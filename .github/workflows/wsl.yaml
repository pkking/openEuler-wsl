name: Build WSL
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
concurrency: build-wsl

env:
  archs: "x64 ARM64"
  workDir: 'C:/Temp/builddir'

jobs:
  build-rootfs:
    uses: ./.github/workflows/rootfs.yaml
  build-wsl:
    needs: build-rootfs
    name: Build openEuler ${{ matrix.release }} app
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        release: [22.03, 20.03]
    steps:
      - name: Checkout code
        shell: bash
        run: |
          mkdir -p ${{ env.workDir }}
          git clone ${{ github.server_url }}/${{ github.repository }} ${{ env.workDir }}
          cd ${{ env.workDir }}
          git checkout "${GITHUB_SHA}"
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.workDir }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: set env
        working-directory: ${{ env.workDir }}
        shell: bash
        run: |
          python3 custom.py -r ${{ matrix.release }}
      - name: show and prepare artifact
        working-directory: ${{ env.workDir }}
        shell: bash
        run: |
          read -ra archs <<< "${{ env.archs }}"
          for arch in ${archs[@]};do
            if [ $arch == "x64" ];then
              targetarch=x86_64
            elif [ $arch == 'ARM64' ];then
              targetarch=aarch64
            fi
            mkdir -vp $arch
            mv -v openeuler-${{ matrix.release }}-$targetarch-wsl-rootfs.tar/openeuler-${{ matrix.release }}-$targetarch-wsl-rootfs.tar.gz $arch/install.tar.gz
          done
          targets=$(echo ${{ env.archs }}|sed 's/ /|/g')
          echo "targets=$targets" >> $GITHUB_ENV
          rm -rf openeuler-*-wsl-rootfs.tar
          ls -lh **
      # Decode the Base64 encoded Pfx
      - name: Decode the Pfx
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.SIGN_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          Import-PfxCertificate -CertStoreLocation Cert:LocalMachine\Trust -FilePath certificate\certificate.pfx
          Import-PfxCertificate -CertStoreLocation Cert:CurrentUser\My -FilePath certificate\certificate.pfx
      - name: Build Bundle
        working-directory: ${{ env.workDir }}
        shell: powershell
        run: |
          msbuild .\DistroLauncher.sln /t:Build /m /nr:false /p:Configuration=Release /p:AppxBundle=Always /p:AppxBundlePlatforms="${{ env.targets }}" -verbosity:normal /p:UapAppxPackageBuildMode="StoreUpload" /p:UseSubFolderForOutputDirDuringMultiPlatformBuild=false
      - name: copy assets
        working-directory: ${{ env.workDir }}
        shell: bash
        run: |
          cp -v meta/${{ matrix.release }}/${{ matrix.release }}.PNG AppPackages/DistroLauncher-Appx/
      - name: Allow downloading sideload appxbundle
        uses: actions/upload-artifact@v2
        with:
          name: sideload-openeuler-${{ matrix.release }}
          path: ${{ env.workDir }}/AppPackages/DistroLauncher-Appx/DistroLauncher-Appx_*/*
          retention-days: 7
      - name: Allow downloading store appxupload
        uses: actions/upload-artifact@v2
        with:
          name: storeupload-openeuler-${{ matrix.release }}
          path: |
            ${{ env.workDir }}/AppPackages/DistroLauncher-Appx/DistroLauncher-Appx_*.appxupload
            ${{ env.workDir }}/AppPackages/DistroLauncher-Appx/*.PNG
